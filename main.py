import os
import json
import time
import telebot
from telebot import types
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ Variables Railway ---
BOT_TOKEN = os.getenv("BOT_TOKEN")               # –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")     # ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")  # JSON —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
ADMIN_ID = int(os.getenv("ADMIN_ID"))            # –¢–≤–æ–π Telegram ID –¥–ª—è –∞–¥–º–∏–Ω–∫–∏

bot = telebot.TeleBot(BOT_TOKEN)

# --- üîê Google Sheets ---
creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
scope = ["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# --- üßæ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
def log_user(chat_id, username, text):
    # –µ—Å–ª–∏ username –ø—É—Å—Ç–æ–π, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º chat_id
    if not username:
        username = f"user_{chat_id}"

    all_records = sheet.get_all_records()
    for i, row in enumerate(all_records, start=2):
        if str(row['chat_id']) == str(chat_id):
            sheet.update_cell(i, 3, text)  # last_message
            return
    # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    sheet.append_row([chat_id, username, text, "", False])

# --- üí¨ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@bot.message_handler(func=lambda m: True)
def handle_all_messages(message):
    if message.from_user.id == ADMIN_ID:
        handle_admin_message(message)
    else:
        log_user(message.chat.id, message.from_user.username, message.text)
        bot.send_message(ADMIN_ID, f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or message.chat.id} ({message.chat.id}):\n{message.text}")

# --- üü¢ –ê–¥–º–∏–Ω—Å–∫–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---
active_chats = {}  # admin_id: –≤—ã–±—Ä–∞–Ω–Ω—ã–π chat_id

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–Ω–æ–ø–∫–∞–º–∏
def send_user_list(admin_id):
    all_records = sheet.get_all_records()
    keyboard = types.InlineKeyboardMarkup()
    for row in all_records:
        # –µ—Å–ª–∏ username –ø—É—Å—Ç–æ–π, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º chat_id
        btn_text = row['username'] if row['username'] else f"user_{row['chat_id']}"
        btn = types.InlineKeyboardButton(text=btn_text, callback_data=f"user:{row['chat_id']}")
        keyboard.add(btn)
    bot.send_message(admin_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda c: c.data.startswith("user:"))
def select_user(callback):
    chat_id = int(callback.data.split(":")[1])
    active_chats[callback.from_user.id] = chat_id
    bot.send_message(callback.from_user.id, f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}. –¢–µ–ø–µ—Ä—å –ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# --- üì§ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
def handle_admin_message(message):
    if message.text.lower() == "/users":
        send_user_list(message.from_user.id)
        return
    chat_id = active_chats.get(message.from_user.id)
    if chat_id:
        bot.send_message(chat_id, message.text)
        bot.send_message(message.from_user.id, f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        # –ª–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
        all_records = sheet.get_all_records()
        for i, row in enumerate(all_records, start=2):
            if str(row['chat_id']) == str(chat_id):
                sheet.update_cell(i, 4, message.text)  # reply
                sheet.update_cell(i, 5, True)          # sent
    else:
        bot.send_message(message.from_user.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /users")

# --- üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ polling: {e}")
        time.sleep(1)
